{describe, it, expect, to_equal} = import '@fink/jest'
{rx} = import '@fink/std-lib/regex'

{init_parser, start_parser} = import '.'
{curr_is, curr_value, curr_loc} = import '.'
{next_is, next_is_end, next_matches, next_loc} = import '.'
{advance_expected, advance} = import '.'
{expression, collect_text} = import '.'

{add_separator, add_operator, add_identifier} = import './symbols'
{add_whitespace} = import './symbols'
{symbol, other_symbol} = import './symbols'


other = fn:
  dict:
    ...other_symbol

    nud: fn: fn ctx:
      value = curr_value ctx
      [{type: 'other', value}, ctx]


infix = fn op:
  dict:
    ...symbol op

    led: fn lbp: fn ctx, left:
      [right, next_ctx] = expression ctx, lbp
      [{type: 'infx', op, left, right}, next_ctx]


prefix = fn op:
  dict:
    ...symbol op

    nud: fn lbp: fn ctx:
      [right, next_ctx] = expression ctx, lbp
      [{type: 'prefix', op, right}, next_ctx]


string = fn op:
  dict:
    ...symbol op
    nud: fn: fn ctx:
      [txt, next_ctx] = collect_text ctx, op
      [{type: 'string', op, value: txt.value}, next_ctx]



init_test_lang = fn ctx:
  pipe ctx:
    add_whitespace ' '
    add_whitespace '\n'

    add_separator symbol ';'

    add_identifier other _

    add_operator string "'"

    add_operator infix '='
    add_operator prefix '!'



parse = fn code:
  ctx = pipe {code, filename: 'test.fnk'}:
    init_parser
    init_test_lang
    start_parser

  expression ctx, 0


describe 'parser', fn:
  it 'parses simple expression', fn:
    [ast, ctx] = parse 'foobar = !123'

    expect
      ast
      to_equal
        {
          type: 'infx'
          op: '='
          left: {
            type: 'other'
            value: 'foobar'
          }
          right: {
            type: 'prefix'
            op: '!'
            right: {
              type: 'other'
              value: '123'
            }
          }
        }

    expect
      next_is_end ctx
      to_equal true


  it 'parses string collecting text to end of string', fn:
    [ast, ctx] = parse "' foobar = 123 '"

    expect
      ast
      to_equal
        {
          type: 'string'
          op: "'"
          value: ' foobar = 123 '
        }

    expect
      next_is_end ctx
      to_equal true


describe 'curr token tests, values, and assertions', fn:
  it 'checks if current token value is same as expected', fn:
    [, ctx] = parse 'foobar = 123'

    expect
      curr_is ctx, '123'
      to_equal true


  it 'checks if current token value', fn:
    [, ctx] = parse 'foobar = 123'

    expect
      curr_value ctx
      to_equal '123'


  it 'gets current token loc', fn:
    [, ctx] = parse 'foobar = 123'

    expect
      curr_loc ctx
      to_equal
        {
          start: {column: 9, line: 1, pos: 9}
          end: {column: 12, line: 1, pos: 12}
        }


describe 'next token tests and assertions', fn:
  it 'checks if next token value is same as expected', fn:
    [, ctx] = parse 'foobar = 123;'

    expect
      next_is ctx, ';'
      to_equal true


  it 'checks if next token matches', fn:
    [, ctx] = parse 'foobar = 123;'

    expect
      next_matches ctx, rx';'
      to_equal true


  it 'checks if end token matches', fn:
    [, ctx] = parse 'foo;bar'

    expect
      next_matches ctx, rx'ni'
      to_equal false


  it 'checks if does not match if at end', fn:
    [, ctx] = parse 'foo'

    next_ctx = advance ctx

    expect
      next_matches next_ctx, rx'foo'
      to_equal false


  it 'gets next token loc', fn:
    [, ctx] = parse 'foobar = 123'

    expect
      next_loc ctx
      to_equal
        {
          start: {column: 12, line: 1, pos: 12}
          end: {column: 12, line: 1, pos: 12}
        }


describe 'advance to next token', fn:

  it 'advances if next token value is as expected', fn:
    [, ctx] = parse 'foobar = 123; shrub = ni'

    next_ctx = advance_expected ctx, ';'

    expect
      next_is next_ctx, 'shrub'
      to_equal true


  it 'errors when next token value is unexpected', fn:
    [, ctx] = parse 'foobar = 123; shrub = ni'

    {errors: [{error}]} = advance_expected ctx, '=='

    expect
      error
      to_equal "
        test.fnk:1:12
        1| foobar = 123; shrub = ni
                       ^

        Expected one of [ '==' ] but found ';'.
        "


describe 'handles errors', fn:
  it 'unexpected end of code', fn:
    [, {errors: [{error}]}] = parse 'foobar ='

    expect
      error
      to_equal '
        test.fnk:1:8
        1| foobar =
                   ^

        Unexpected end of code.
        '


  it 'unexpected infix', fn:
    [, {errors: [{error}]}] = parse '= 123'

    expect
      error
      to_equal "
        test.fnk:1:0
        1| = 123
           ^

        Unexpected token '=' at start of expression.
        "


  it 'using prefix operator as infix operator', fn:
    [, {errors: [{error}]}] = parse 'foo ! ni'

    expect
      error
      to_equal "
        test.fnk:1:4
        1| foo ! ni
               ^

        Cannot use '!' as an infix operator.
        "


  it 'using other as infix operator', fn:
    [, {errors: [{error}]}] = parse 'foo = spam ni'

    expect
      error
      to_equal "
        test.fnk:1:11
        1| foo = spam ni
                      ^

        Cannot use 'ni' as an infix operator.
        "


  it 'collecting text when not finding expected end', fn:
    [, {errors: [{error}]}] = parse "'foo bar"

    expect
      error
      to_equal "
        test.fnk:1:8
        1| 'foo bar
                   ^

        Unexpected end of code.
        "

