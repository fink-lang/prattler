{is_empty} = import '@fink/std-lib/iter.fnk'
{next, iter, unfold, filter} = import '@fink/std-lib/iter.fnk'

{init_expr_builders, is_ignorable, next_lbp, led, nud} = import './expressions.fnk'
{add_error} = import './errors.fnk'



start_token = rec:
  start: true
  loc: rec:
    start: {pos: 0, line: 1, column: 0}
    end: {pos: 0, line: 1, column: 0}



has_errors = fn ctx:
  match ctx:
    {errors: not is_empty ?}: true
    else: false



curr_value = fn {curr_token}:
  curr_token.value



curr_loc = fn {curr_token}:
  curr_token.loc



next_value = fn {next_token}:
  next_token.value



next_loc = fn {next_token}:
  next_token.loc



next_is = fn ctx, expected:
  expected == next_value ctx



next_is_end = fn ctx:
  match ctx:
    {next_token: {type: 'end'}}:
      true
    # {tokens: {done: true}}:
    #   console.log '>>>>>'
    #   true
    else:
      false



advance = fn ctx:
  {next_token: curr_token, tokens, ignored_tokens} = ctx

  match curr_token:
    {type: 'end'}:
      {...ctx, curr_token}

    else:
      [next_token, next_tokens] = next tokens

      match next_token:
        is_ignorable ctx, ?:
          advance rec:
            ...ctx
            tokens: next_tokens
            ignored_tokens: [...ignored_tokens, next_token]

        else:
          next_ctx = rec:
            ...ctx
            tokens: next_tokens
            curr_token
            next_token
            ignored_tokens

          next_ctx



expression = fn ctx, rbp:
  match ctx:
    next_is_end ?:
      add_error ctx, 'Unexpected end of code.', ctx.curr_token

    else:

      [[left, next_ctx]] = pipe ctx:
        advance
        nud
        unfold fn [left, ctx]:
          match ctx:
            has_errors ?:
              [left, ctx, true]

            rbp < next_lbp ?, left:
              led_ctx = advance ctx
              [next_left, next_ctx] = led led_ctx, left
              [next_left, next_ctx, false]

            else:
              [left, ctx, true]

        filter fn [,,found]:
          found

      [left, next_ctx]



init_parser = fn {code, filename, tokens}:
  expr_builders = init_expr_builders _
  start_loc = {pos: 0, line: 1, column: 0}

  rec:
    code
    filename
    tokens: iter tokens
    curr_token: {loc: {start: start_loc, end: start_loc}}
    next_token: {loc: {start: start_loc, end: start_loc}}
    ignored_tokens: []
    expr_builders
    errors: []




start_parser = fn ctx:
  advance ctx

