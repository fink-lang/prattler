{describe, it, is, eq} = import './testing'

{init_tokenizer, add_token} = import './tokenizer'
{end_token, get_next_token} = import './tokenizer'


describe:: 'tokenizer', fn:
  tokenize = fn code:
    ctx = pipe init_tokenizer(code, 'test.fnk'):
      add_token(' ')
      add_token('\n')
      add_token('=')
      add_token('!=')
      add_token('ni', false)

    tokens = pipe [null, ctx]:
      unfold [token, ctx]:
        [next_token, next_ctx] = get_next_token(ctx)
        [next_token, next_ctx]

    fn:
      {value , done} = tokens.next()
      [token] = value
      token


  it:: 'tokenizes single line', fn:
    next_token = tokenize('foo = 1234')

    expect(next_token()).toEqual({
      value: 'foo',
      loc: {
        start: {pos: 0, line: 1, column: 0},
        end: {pos: 3, line: 1, column: 3}
      }
    })

    expect(next_token()).toEqual({
      value: ' ',
      loc: {
        start: {pos: 3, line: 1, column: 3},
        end: {pos: 4, line: 1, column: 4}
      }
    })

    expect(next_token()).toEqual({
      value: '=',
      loc: {
        start: {pos: 4, line: 1, column: 4},
        end: {pos: 5, line: 1, column: 5}
      }
    })

    expect(next_token()).toEqual({
      value: ' ',
      loc: {
        start: {pos: 5, line: 1, column: 5},
        end: {pos: 6, line: 1, column: 6}
      }
    })

    expect(next_token()).toEqual({
      value: '1234',
      loc: {
        start: {pos: 6, line: 1, column: 6},
        end: {pos: 10, line: 1, column: 10}
      }
    })

    expect(next_token()).toEqual({
      value: end_token,
      loc: {
        start: {pos: 10, line: 1, column: 10},
        end: {pos: 10, line: 1, column: 10}
      }
    })


  it:: 'tokenizes multiple lines', fn:
    next_token = tokenize('foo\n 1234')

    expect(next_token()).toEqual({
      value: 'foo',
      loc: {
        start: {pos: 0, line: 1, column: 0},
        end: {pos: 3, line: 1, column: 3}
      }
    })

    expect(next_token()).toEqual({
      value: '\n',
      loc: {
        start: {pos: 3, line: 1, column: 3},
        end: {pos: 4, line: 2, column: 0}
      }
    })

    expect(next_token()).toEqual({
      value: ' ',
      loc: {
        start: {pos: 4, line: 2, column: 0},
        end: {pos: 5, line: 2, column: 1}
      }
    })

    expect(next_token()).toEqual({
      value: '1234',
      loc: {
        start: {pos: 5, line: 2, column: 1},
        end: {pos: 9, line: 2, column: 5}
      }
    })

    expect(next_token()).toEqual({
      value: end_token,
      loc: {
        start: {pos: 9, line: 2, column: 5},
        end: {pos: 9, line: 2, column: 5}
      }
    })


  it:: 'tokenizes separating multi-char symbols', fn:
    next_token = tokenize('ni =!= 123')

    expect(next_token()).toEqual({
      value: 'ni',
      loc: {
        start: {pos: 0, line: 1, column: 0},
        end: {pos: 2, line: 1, column: 2}
      }
    })

    expect(next_token()).toEqual({
      value: ' ',
      loc: {
        start: {pos: 2, line: 1, column: 2},
        end: {pos: 3, line: 1, column: 3}
      }
    })

    expect(next_token()).toEqual({
      value: '=',
      loc: {
        start: {pos: 3, line: 1, column: 3},
        end: {pos: 4, line: 1, column: 4}
      }
    })

    expect(next_token()).toEqual({
      value: '!=',
      loc: {
        start: {pos: 4, line: 1, column: 4},
        end: {pos: 6, line: 1, column: 6}
      }
    })

    expect(next_token()).toEqual({
      value: ' ',
      loc: {
        start: {pos: 6, line: 1, column: 6},
        end: {pos: 7, line: 1, column: 7}
      }
    })

    expect(next_token()).toEqual({
      value: '123',
      loc: {
        start: {pos: 7, line: 1, column: 7},
        end: {pos: 10, line: 1, column: 10}
      }
    })

    expect(next_token()).toEqual({
      value: end_token,
      loc: {
        start: {pos: 10, line: 1, column: 10},
        end: {pos: 10, line: 1, column: 10}
      }
    })


  it:: 'tokenizes non-separating multi-char symbols', fn:
    next_token = tokenize('ni nini')

    expect(next_token()).toEqual({
      value: 'ni',
      loc: {
        start: {pos: 0, line: 1, column: 0},
        end: {pos: 2, line: 1, column: 2}
      }
    })

    expect(next_token()).toEqual({
      value: ' ',
      loc: {
        start: {pos: 2, line: 1, column: 2},
        end: {pos: 3, line: 1, column: 3}
      }
    })

    expect(next_token()).toEqual({
      value: 'nini',
      loc: {
        start: {pos: 3, line: 1, column: 3},
        end: {pos: 7, line: 1, column: 7}
      }
    })

    expect(next_token()).toEqual({
      value: end_token,
      loc: {
        start: {pos: 7, line: 1, column: 7},
        end: {pos: 7, line: 1, column: 7}
      }
    })


  it:: 'handles empty code', fn:
    next_token = tokenize('')

    expect(next_token()).toEqual({
      value: end_token,
      loc: {
        start: {pos: 0, line: 1, column: 0},
        end: {pos: 0, line: 1, column: 0}
      }
    })
